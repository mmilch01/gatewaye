/*
 * Status.java
 * The root UI that gives the user access to Gateway's configurations, displays whether
 * the Gateway dicom server running and uptime.
 * Created on May 27, 2010, 12:03:26 PM
 */

package org.nrg.xnat.gui;

import java.awt.Cursor;
import org.nrg.xnat.gateway.XNATGatewayServer;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.Vector;
import javax.swing.JOptionPane;
import org.nrg.xnat.env.GatewayEnvironment;
import org.nrg.xnat.env.XNATServer;

/**

 * @author Aditya Siram
 */
public class Status extends javax.swing.JFrame {
    private GatewayEnvironment env;

    // modal windows that cannot be opened when the dicom server is running.
    private ChildManager server_windows;
    private ChildManager aes_windows;
    private ChildManager log_window;
    private ChildManager root;

    // separate thread that displays the uptime of the dicom server.
    private UptimeUpdate up;

    /** Creates new form Status */
    public Status(GatewayEnvironment env) {
        initComponents();
        initialize(env);
    }

    /*
     * Initialize the GUI environment, should only be called once by the constructor
     */
    private void initialize(GatewayEnvironment env) {
        this.env = env;

        // Give the modal windows the GUI buttons that create child windows, the buttons
        // will be disabled until all the child windows are closed
        server_windows = new DefaultChildManager(this.configure_servers_button);
        aes_windows = new DefaultChildManager(this.configure_aes_button);
        log_window = new DefaultChildManager(this.view_logs_button);
        root = new DefaultChildManager(this.server_start_stop_button);

        // give the child windows a link back to the main parent window (this screen)
        server_windows.add_parent(root);
        aes_windows.add_parent(root);
        
        setTitle("XNAT Gateway, ver. "+GatewayEnvironment.version);

        // start the uptime monitor with a label that updates everytime the monitor
        // polls the Gateway
        up = new UptimeUpdate(this.uptime_label);
        up.start();
    }

    /*
     * Reset the uptime monitor
     */
    private void restartUptimeMonitor() {
        up.stop();
        up.start();
    }

    /**
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        current_xnat_server_user_label = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        configure_servers_button = new javax.swing.JButton();
        configure_aes_button = new javax.swing.JButton();
        server_start_stop_button = new javax.swing.JButton();
        server_running_or_stopped_label = new javax.swing.JLabel();
        view_logs_button = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        uptime_label = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
//        setTitle("Gateway Status");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setText("Status:");

        jLabel2.setText("Current XNAT Server");

        current_xnat_server_user_label.setText("(<initialize>,<initialize>)");

        jLabel4.setText("AE Configuration");

        configure_servers_button.setText("Change/Configure");
        configure_servers_button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                configure_servers_buttonMouseClicked(evt);
            }
        });

        configure_aes_button.setText("Change/Configure");
        configure_aes_button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                configure_aes_buttonMousePressed(evt);
            }
        });

        server_start_stop_button.setText("Stop");
        server_start_stop_button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                server_start_stop_buttonMousePressed(evt);
            }
        });

        server_running_or_stopped_label.setText("(uninitialized)");

        view_logs_button.setText("View Logs");
        view_logs_button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                view_logs_buttonMousePressed(evt);
            }
        });

        jLabel3.setText("Uptime:");

        uptime_label.setText("jLabel5");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                        .addComponent(server_running_or_stopped_label)
                        .addGap(191, 191, 191))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(current_xnat_server_user_label)
                            .addComponent(jLabel2)
                            .addComponent(server_start_stop_button, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(view_logs_button, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                            .addComponent(configure_aes_button, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                            .addComponent(configure_servers_button, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(uptime_label)
                        .addContainerGap(241, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(server_running_or_stopped_label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(uptime_label))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(server_start_stop_button)
                    .addComponent(view_logs_button))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(current_xnat_server_user_label)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(configure_aes_button)))
                    .addComponent(configure_servers_button))
                .addGap(43, 43, 43))
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-371)/2, (screenSize.height-283)/2, 371, 283);
    }// </editor-fold>//GEN-END:initComponents

    private void configure_servers_buttonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_configure_servers_buttonMouseClicked
        if (this.configure_servers_button.isEnabled()) {
            if (!XNATGatewayServer.isRunning()) {
                this.server_windows.add_to_child_count();
                final Vector<UpdateableComponent> v = new Vector<UpdateableComponent>();
                RefreshDefaultServerInfo r = new RefreshDefaultServerInfo(this.current_xnat_server_user_label, env);
                v.add(r);
                java.awt.EventQueue.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        new XNATServers(env, server_windows, v).setVisible(true);
                    }
                });
            } else {
                GUIUtils.warn("Please stop the server first.\n Cannot make configuration changes while the server is running", "Config error");
            }
        }
    }//GEN-LAST:event_configure_servers_buttonMouseClicked

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        XNATGatewayServer.stop();
    }//GEN-LAST:event_formWindowClosed

    private void showDefaultXNATServer () {
        XNATServer s = this.env.get_default_server();
        this.current_xnat_server_user_label.setText("(" + s.getName() + "," + s.getUsername() + ")");
    }

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // The server is automatically started on application startup and should display an
        // error if it couldn't. Once the server is started it needs a bit to settle in, so
        // block.
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {}

        // The check to see if the server is running is currently unnecessary,
        // but the logic might change in the future.
        if (XNATGatewayServer.isRunning()) {
            this.server_start_stop_button.setText("Stop");
            this.server_running_or_stopped_label.setText("Running");
        }
        else {
            this.server_start_stop_button.setText("Start");
            this.server_running_or_stopped_label.setText("Stopped");
        }
        this.showDefaultXNATServer();
    }//GEN-LAST:event_formWindowOpened

    /*
     * Bring up the UI that configures the Remote AE devices but make sure the server isn't running.
     */
    private void configure_aes_buttonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_configure_aes_buttonMousePressed
        if (this.configure_aes_button.isEnabled()) {
            if (!XNATGatewayServer.isRunning()) {
                this.aes_windows.add_to_child_count();
                java.awt.EventQueue.invokeLater(new Runnable() {
                    public void run() {
                        new AEs(env, aes_windows).setVisible(true);
                    }
                });
            } else {
                GUIUtils.warn("Please stop the server first.\n Cannot make configuration changes while the server is running", "Config error");
            }
        }
    }//GEN-LAST:event_configure_aes_buttonMousePressed

    /*
     * Button to start and stop the server. The "Status" and "Uptime" label are kept in sync when
     * this button is clicked.
     */
    private void server_start_stop_buttonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_server_start_stop_buttonMousePressed
        if (this.server_start_stop_button.isEnabled()) {
            try {
                // Stop a currently running server
                if (XNATGatewayServer.isRunning()) {
                    XNATGatewayServer.stop();
                    up.stop();
                    this.server_start_stop_button.setText("Start");
                    this.server_running_or_stopped_label.setText("Stopped");
                } // Or start the server. One thing to keep in mind is that since a server is automatically started
                // when this application is started, this code will only be executed at runtime after the user has
                // explictly stopped the server.
                else {
                    XNATGatewayServer.start(env.get_properties(), env);
                    this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                    // wait for the server thread to get started. Not the best
                    Thread.sleep(1000);
                    this.setCursor(Cursor.getDefaultCursor());
                    // if the start() call above worked, reflect that in the GUI. If it didn't any exception thrown is
                    // handled by the server startup code so all we have to do is make sure the GUI accurately reflects
                    // the state of the server.
                    if (XNATGatewayServer.isRunning()) {
                        this.restartUptimeMonitor();
                        this.server_start_stop_button.setText("Stop");
                        this.server_running_or_stopped_label.setText("Running");
                    }
                }
            } catch (Exception e) {
                StringWriter writer = new StringWriter();
                e.printStackTrace(new PrintWriter(writer));
                String trace = writer.toString();
                GUIUtils.application_stop(e.toString() + "\n" + trace, "Start here error");
            }
        }
    }//GEN-LAST:event_server_start_stop_buttonMousePressed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (XNATGatewayServer.isRunning()) {
            int delete_confirm = JOptionPane.showConfirmDialog(null, "Closing the window stops the Gateway server.\n Are you sure you want to quit?", "Delete Confirmation", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if (delete_confirm == JOptionPane.YES_OPTION) {
                System.exit(0);
            }
        }
        else {
            System.exit(0);
        }
    }//GEN-LAST:event_formWindowClosing

    private void view_logs_buttonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_view_logs_buttonMousePressed
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GatewayLog(log_window,env).setVisible(true);
            }
        });
        this.log_window.add_to_child_count();
    }//GEN-LAST:event_view_logs_buttonMousePressed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton configure_aes_button;
    private javax.swing.JButton configure_servers_button;
    private javax.swing.JLabel current_xnat_server_user_label;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel server_running_or_stopped_label;
    private javax.swing.JButton server_start_stop_button;
    private javax.swing.JLabel uptime_label;
    private javax.swing.JButton view_logs_button;
    // End of variables declaration//GEN-END:variables

}
